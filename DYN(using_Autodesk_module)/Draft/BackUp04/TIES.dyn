{
  "Uuid": "68657227-557d-4edf-8ce0-65e01c266da5",
  "IsCustomNode": false,
  "Description": null,
  "Name": "TIES",
  "ElementResolver": {
    "ResolutionMap": {
      "Vector.XAxis": {
        "Key": "Autodesk.DesignScript.Geometry.Vector",
        "Value": "ProtoGeometry.dll"
      },
      "Point": {
        "Key": "Autodesk.DesignScript.Geometry.Point",
        "Value": "ProtoGeometry.dll"
      },
      "Vector": {
        "Key": "Autodesk.DesignScript.Geometry.Vector",
        "Value": "ProtoGeometry.dll"
      },
      "Geometry": {
        "Key": "Autodesk.DesignScript.Geometry.Geometry",
        "Value": "ProtoGeometry.dll"
      },
      "Vector.YAxis": {
        "Key": "Autodesk.DesignScript.Geometry.Vector",
        "Value": "ProtoGeometry.dll"
      },
      "Geometry.tr": {
        "Key": "Autodesk.DesignScript.Geometry.Geometry",
        "Value": "ProtoGeometry.dll"
      },
      "Get": {
        "Key": "DesignScript.Builtin.Get",
        "Value": "DesignScriptBuiltin.dll"
      },
      "List": {
        "Key": "List",
        "Value": "BuiltIn.ds"
      },
      "PolyCurve": {
        "Key": "Autodesk.DesignScript.Geometry.PolyCurve",
        "Value": "ProtoGeometry.dll"
      },
      "Line": {
        "Key": "Autodesk.DesignScript.Geometry.Line",
        "Value": "ProtoGeometry.dll"
      }
    }
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport math\r\nimport clr\r\nfrom itertools import chain\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nimport Autodesk\r\nfrom itertools import islice\r\n\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\n#\"\"\" Global Variables\"\"\"\r\n#b = int(input('please enter column's b length: '))\r\nb = 1500\r\n#h = int(input('please enter column's h length: '))\r\nh = 400\r\n#bp = list(range(int(input(\"please enter column's b side rebar number: \"))))\r\nbPoints = list(range(15))\r\n_bPoints = bPoints[:]\r\n#hp = list(range(int(input(\"please enter column's h side rebar number: \"))))\r\nhPoints = list(range(4))\r\n_hPoints = hPoints\r\n#sp = int(input(\"please enter v-spacing criteria: \"))\r\nsp = 150\r\n#hlen = int(input(\"Please enter h length criteria: \"))\r\nbMin = 600\r\n\r\nclearCover = 40\r\nvDia = 25\r\nhDia = 12\r\nvCover = clearCover+hDia+(vDia/2.0)\r\nhCover = clearCover+(hDia/2.0)\r\n\r\nasp = (b-(2*vCover))/float(len(bPoints)-1)\r\n\r\n#----------------------------------------------------------\r\n\"\"\" DYNAMO-PYTHON Geometry Function \"\"\"\r\ndef slc(lst): #to slice vertical rebar list into pattern.\r\n\tpatt = [3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3]\r\n\tit = iter(lst)\r\n\tsliced =[list(islice(it, 0, i)) for i in patt]\r\n\tfor i in sliced[::-1]:\r\n\t    if i == []:\r\n        \tsliced.remove(i)\r\n\treturn sliced\r\n# Concrete Column\r\nbasePoint = Point.ByCoordinates(0, 0, 0)\r\ndef column(basePoint, b, h):\r\n\tp1 = basePoint\r\n\tp2 = Geometry.Translate(p1, Vector.XAxis(), b)\r\n\tp3 = Geometry.Translate(p2, Vector.YAxis(), h)\r\n\tp4 = Geometry.Translate(p3, Vector.XAxis(), -b)\r\n\tlp = [p1, p2, p3, p4]\r\n\tpl = Polygon.ByPoints(lp)\r\n\treturn pl, lp\r\n#Driver\r\ncolumn = column(basePoint, b, h)\r\n\r\n# Vertical Rebar Distribution\r\ndef vRebar(basePoint, vCover, hCover, bPoints, hPoints, b, h):\r\n\t_p = Geometry.Translate(basePoint, Vector.ByCoordinates(vCover, vCover, 0))\r\n\tabsp = (b-(2*vCover))/(len(bPoints)-1)\r\n\tdabsp = absp\r\n\tahsp = (h-(2*vCover))/(len(hPoints)-1)\r\n\tdahsp = ahsp\r\n\tlbp = [_p]\r\n\t_lbp = []\r\n\tlhp = [_p]\r\n\t_lhp = []\r\n\tfor nb in range(len(bPoints)-1):\r\n\t\tlbp.append(Geometry.Translate(_p, Vector.ByCoordinates(dabsp, 0, 0)))\r\n\t\tdabsp += absp\r\n\tfor _nb in lbp:\r\n\t\t_lbp.append(Geometry.Translate(_nb, Vector.ByCoordinates(0, h-(2*vCover), 0)))\r\n\tfor nh in range(len(hPoints)-1):\r\n\t\tlhp.append(Geometry.Translate(_p, Vector.ByCoordinates(0, dahsp, 0)))\r\n\t\tdahsp += ahsp\r\n\tfor _nh in lhp:\r\n\t\t_lhp.append(Geometry.Translate(_nh, Vector.ByCoordinates(b-(2*vCover), 0, 0)))\r\n\treturn lbp[1:-1], _lbp[1:-1], lhp, _lhp\r\n\r\n#Driver\r\nvRebars = vRebar(basePoint, vCover, hCover, bPoints, hPoints, b, h)\r\n\r\n# Get rebars of same position in the opposit list\r\ndef getTwin(vRebar, pureb_leftRebar, currentRebars, side):\r\n\tvRebars = vRebar(basePoint, vCover, hCover, bPoints, hPoints, b, h)\r\n\tvRebarsbPointsList = vRebars[0]\r\n\tvRebars_bPointsList = vRebars[1]\r\n\tvRebarshPointsList = vRebars[2]\r\n\tvRebars_hPointsList = vRebars[3]\r\n\r\n\tif len(pureb_leftRebar) == 1:\r\n\t\ttemp1 = currentRebars[:]\r\n\t\toppositRebars = []\r\n\t\tfor i in temp1:\r\n\t\t\tif side == 'b':\r\n\t\t\t\tti = vRebarsbPointsList.index(i)\r\n\t\t\t\tt = vRebars_bPointsList[ti]\r\n\t\t\t\toppositRebars.append(t)\r\n\t\treturn oppositRebars\r\n\telif len(pureb_leftRebar) >= 2:\r\n\t\ttemp1 = list(chain.from_iterable(currentRebars))\r\n\t\ttemp2 = []\r\n\t\tn = len(currentRebars[0])\r\n\t\tfor l in temp1:\r\n\t\t\tli = temp1.index(l)\r\n\t\t\tif side == 'b':\r\n\t\t\t\tti = vRebarsbPointsList.index(l)\r\n\t\t\t\tt = vRebars_bPointsList[ti]\r\n\t\t\t\ttemp2.append(t)\r\n\t\toppositRebars = [temp2[i:i + n] for i in range(0, len(temp2), n)]\r\n\t\treturn oppositRebars\r\n\t\r\n# Getting Stirrup's curves from Pure Points:\r\ndef getCurve(stirrupPoints):\r\n\tcurrentPoints = stirrupPoints[0]\r\n\ttwinPoints = stirrupPoints[1]\r\n\tpurePoints = [currentPoints, twinPoints]\r\n\ttry:\r\n\t\tfor lst in twinPoints:\r\n\t\t\tlist.reverse(lst)\r\n\t\tpurePoints_transposed = list(map(list, zip(*purePoints)))\r\n\t\tflattened = []\r\n\t\tfor i in purePoints_transposed:\r\n\t\t\tflattened.append(list(chain.from_iterable(i)))\r\n\t\treturn flattened\r\n\texcept: #for single pure rebar per one half of a side\r\n\t\tlist.reverse(twinPoints)\r\n\t\tflattened = []\r\n\t\tflattened.append(list(chain.from_iterable(purePoints)))\r\n\t\treturn flattened\r\n# Conditioning Grouping:\r\ndef tie(p, vCover, hCover, bPoints, hPoints, b, h):\r\n\tvRebars = vRebar(p, vCover, hCover, bPoints, hPoints, b, h)\r\n\tif len(vRebars[0])%2 != 0:\r\n\t\treturn tieOdd(p, vCover, hCover, bPoints, hPoints, b, h)\r\n\r\ndef tieOdd(p, vCover, hCover, bPoints, hPoints, b, h):\r\n\tvRebars = vRebar(p, vCover, hCover, bPoints, hPoints, b, h)\r\n\tvRebarsbPointsList = vRebars[0]\r\n\tbHalf = len(vRebarsbPointsList)/2\r\n\tb_leftRebar = vRebarsbPointsList[:bHalf]\r\n\tb_rightRebar = vRebarsbPointsList[bHalf+1:][::-1]\r\n\tpureb_leftRebar = b_leftRebar[3:]\r\n\tpureb_rightRebar = b_rightRebar[3:]\r\n\tif len(pureb_leftRebar) <= 3:\r\n\t\treturn tieOdd1(p, vCover, hCover, bPoints, hPoints, b, h)\r\n\telse:\r\n\t\treturn tieOdd2(p, vCover, hCover, bPoints, hPoints, b, h)\r\n\r\ndef tieOdd1(p, vCover, hCover, bPoints, hPoints, b, h):\r\n\tvRebars = vRebar(p, vCover, hCover, bPoints, hPoints, b, h)\r\n\tvRebarsbPointsList = vRebars[0]\r\n\tbHalf = len(vRebarsbPointsList)/2\r\n\tb_leftRebar = vRebarsbPointsList[:bHalf]\r\n\tb_rightRebar = vRebarsbPointsList[bHalf+1:][::-1]\r\n\tpureb_leftRebar = b_leftRebar[3:]\r\n\tpureb_rightRebar = b_rightRebar[3:]\r\n\tbMid = vRebarsbPointsList[bHalf]\r\n\tif len(pureb_leftRebar) == 1:\r\n\t\tb_vRebarTie = list((pureb_leftRebar[-1], pureb_rightRebar[-1]))\r\n\t\t_b_vRebarTie = getTwin(vRebar,pureb_leftRebar, b_vRebarTie, 'b')\r\n\t\treturn b_vRebarTie, _b_vRebarTie\r\n\telif len(pureb_leftRebar) == 2:\r\n\t\tb_vRebarTie = list((pureb_leftRebar[-2:], pureb_rightRebar[-2:]))\r\n\t\t_b_vRebarTie = getTwin(vRebar, pureb_leftRebar, b_vRebarTie, 'b')\r\n\t\treturn b_vRebarTie, _b_vRebarTie\r\n\telif len(pureb_leftRebar) == 3:\r\n\t\tb_vRebarTie = list((pureb_leftRebar[::2], pureb_rightRebar[::2]))\r\n\t\t_b_vRebarTie = getTwin(vRebar, pureb_leftRebar, b_vRebarTie, 'b')\r\n\t\treturn b_vRebarTie, _b_vRebarTie\r\n\t\t\r\ndef tieOdd2(p, vCover, hCover, bPoints, hPoints, b, h):\r\n\tvRebars = vRebar(p, vCover, hCover, bPoints, hPoints, b, h)\r\n\tvRebarsbPointsList = vRebars[0]\r\n\tbHalf = len(vRebarsbPointsList)/2\r\n\tb_leftRebar = vRebarsbPointsList[:bHalf]\r\n\tb_rightRebar = vRebarsbPointsList[bHalf+1:][::-1]\r\n\tpureb_leftRebar = b_leftRebar[3:]\r\n\tpureb_rightRebar = b_rightRebar[3:]\r\n\tbMid = vRebarsbPointsList[bHalf]\r\n\r\n\taLeft = slc(pureb_leftRebar)\r\n\taRight = slc(pureb_rightRebar)\r\n\tlenLast = len(aLeft[-1])\r\n\tlenBeforeLast = len(aLeft[-2])\r\n\tb_vRebarTie = []\r\n\tif lenLast == 1 and lenBeforeLast == 3:\t\t\t#17\r\n\t\tfor i in aLeft:\r\n\t\t\tif len(i) == 3:\r\n\t\t\t\tb_vRebarTie.append([i[0], i[-1]])\r\n\t\tfor i in aRight:\r\n\t\t\tif len(i) == 3:\r\n\t\t\t\tb_vRebarTie.append([i[0], i[-1]])\r\n\t\tb_vRebarTie.append([bMid])\r\n\t\t_b_vRebarTie = getTwin(vRebar, pureb_leftRebar, b_vRebarTie, 'b')\r\n\t\treturn b_vRebarTie, _b_vRebarTie\r\n\telif lenLast == 1 and lenBeforeLast == 1:\t\t#19\r\n\t\tfor i in aLeft:\r\n\t\t\tif len(i) == 3:\r\n\t\t\t\tb_vRebarTie.append([i[0], i[-1]])\r\n\t\tb_vRebarTie.append(aLeft[-1])\r\n\t\tb_vRebarTie[-1].append(aRight[-1][0])\r\n\t\tfor i in aRight:\r\n\t\t\tif len(i) == 3:\r\n\t\t\t\tb_vRebarTie.append([i[0], i[-1]])\r\n\t\t_b_vRebarTie = getTwin(vRebar, pureb_leftRebar, b_vRebarTie, 'b')\r\n\t\treturn b_vRebarTie, _b_vRebarTie\r\n\telse: \t\t\t\t\t\t\t\t\t\t\t#21 onward\r\n\t\tfor i in aLeft:\r\n\t\t\tif len(i) == 3 or len(i) == 2:\r\n\t\t\t\tb_vRebarTie.append([i[0], i[-1]])\r\n\t\tfor i in aRight:\r\n\t\t\tif len(i) == 3 or len(i) == 2:\r\n\t\t\t\tb_vRebarTie.append([i[0], i[-1]])\r\n\t\t_b_vRebarTie = getTwin(vRebar, pureb_leftRebar, b_vRebarTie, 'b')\r\n\t\treturn b_vRebarTie, _b_vRebarTie\r\n\r\n#----------------------------------\r\n#OUT = column, vRebars, asp\r\nstirrups =  tie(basePoint, vCover, hCover, bPoints, hPoints, b, h)\r\nOUT = stirrups\r\n#OUT = getTwin(vRebar, 1, 3)\r\nOUT = getCurve(stirrups), vRebars, column, asp\r\n#OUT = asp",
      "VariableInputPorts": true,
      "Id": "4c2929a6030f40b89e20bfe7ff74fa59",
      "Inputs": [
        {
          "Id": "4e43b248854043899dac35692288d918",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0f6cd5bc8d564399a6cadc97b98ac448",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a[0];",
      "Id": "6747718378954930bf211dd128456c34",
      "Inputs": [
        {
          "Id": "7ca1edd8a7784e6cb9d86c7e103b2f4d",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d01211d4b8914c91bbb176fa2a295d95",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a[1];",
      "Id": "ab5865f25e914e4b830f50eec617159f",
      "Inputs": [
        {
          "Id": "fe96c96d36b24b07a9e66db02666f24d",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8feec6392754422ea78055121f51a2c7",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "t2 = List.Flatten(t3, -1);\nvector1 = Vector.ByCoordinates(0, 0, -10000);\nstirrup = (0..10000..150);\nvector2 = Vector.ByCoordinates(0, 0, -stirrup);\ngeometry1 = Geometry.Translate(t2, vector1);\nline1 = Line.ByStartPointEndPoint(t2, geometry1);\npolyCurve1 = PolyCurve.ByPoints(t5, true);\ngeometry2 = Geometry.Translate(polyCurve1<1>, vector2<2>);\na = vector2;",
      "Id": "af3c444caa914b3c9d0ec8248a3f4718",
      "Inputs": [
        {
          "Id": "4a65da6b3fda4cdcbdd28562537af66c",
          "Name": "t3",
          "Description": "t3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cc8d4474143440feb8927d5fdf9b223b",
          "Name": "t5",
          "Description": "t5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "492230cc37e041639e7695f557764e19",
          "Name": "",
          "Description": "t2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6cd78f0bf5e848e789e12599c6b25649",
          "Name": "",
          "Description": "vector1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8793a56ede744a46999084fad84da558",
          "Name": "",
          "Description": "stirrup",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9509e6f502ae475687a66c712f815678",
          "Name": "",
          "Description": "vector2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "638cf79718974a60ae6c2e10a9f2eee5",
          "Name": "",
          "Description": "geometry1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "60172f731d42479388875c8e6f7aad2a",
          "Name": "",
          "Description": "line1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "84716a5efacb49afb83bc1d91798408c",
          "Name": "",
          "Description": "polyCurve1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "22f6360a371c4dc5bb081ef41023206d",
          "Name": "",
          "Description": "geometry2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5de98be9bf8848ba94f4e2907d54d116",
          "Name": "",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.PolyCurve.ByPoints@Autodesk.DesignScript.Geometry.Point[],bool",
      "Id": "60407c4cfcf446beb50de49cc979d975",
      "Inputs": [
        {
          "Id": "45db0b7330b84694947b9e3f1860e35f",
          "Name": "points",
          "Description": "Points to make polycurve\n\nPoint[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "78e95127ecb94b6f81b0f58f8cd0a046",
          "Name": "connectLastToFirst",
          "Description": "make close or open polycurve\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "903570a6aa5844eea15cebca3911a6b6",
          "Name": "PolyCurve",
          "Description": "PolyCurve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Make PolyCurve by connecting points. Set the 'connectLastToFirst' input to true to close the PolyCurve.\n\nPolyCurve.ByPoints (points: Point[], connectLastToFirst: bool = false): PolyCurve"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "true;",
      "Id": "08958880f6974cbc89ab31458c44839d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "886580abe1ad4d588232533ffeaf8fd3",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    }
  ],
  "Connectors": [
    {
      "Start": "0f6cd5bc8d564399a6cadc97b98ac448",
      "End": "7ca1edd8a7784e6cb9d86c7e103b2f4d",
      "Id": "02ec70e0e7774df49f25f1072bcaddf5"
    },
    {
      "Start": "0f6cd5bc8d564399a6cadc97b98ac448",
      "End": "fe96c96d36b24b07a9e66db02666f24d",
      "Id": "96f3f262452e49898f7317fb978d46cf"
    },
    {
      "Start": "d01211d4b8914c91bbb176fa2a295d95",
      "End": "45db0b7330b84694947b9e3f1860e35f",
      "Id": "e33517c830b84fd59b24494437810640"
    },
    {
      "Start": "d01211d4b8914c91bbb176fa2a295d95",
      "End": "cc8d4474143440feb8927d5fdf9b223b",
      "Id": "dc1bf9947e2f4d73afc6b01289872318"
    },
    {
      "Start": "886580abe1ad4d588232533ffeaf8fd3",
      "End": "78e95127ecb94b6f81b0f58f8cd0a046",
      "Id": "13cfa277386d4f0db31d4ccd07b3a123"
    }
  ],
  "Dependencies": [],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 10000.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.1.0.7500",
      "RunType": "Automatic",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": 1092.3741278558509,
      "EyeY": 889.74641355940992,
      "EyeZ": 810.28011132813492,
      "LookX": -477.97125322603938,
      "LookY": -1148.5141599072242,
      "LookZ": -669.82806239126455,
      "UpX": -0.38866718859771249,
      "UpY": 0.74314482547738869,
      "UpZ": -0.54467750538617987
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "4c2929a6030f40b89e20bfe7ff74fa59",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -690.900087107707,
        "Y": 536.26464445448778
      },
      {
        "ShowGeometry": true,
        "Name": "T5",
        "Id": "6747718378954930bf211dd128456c34",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -639.56693081165383,
        "Y": 381.78265937830889
      },
      {
        "ShowGeometry": true,
        "Name": "T3",
        "Id": "ab5865f25e914e4b830f50eec617159f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -575.764247978965,
        "Y": 593.08460044708363
      },
      {
        "ShowGeometry": true,
        "Name": "Test Output",
        "Id": "af3c444caa914b3c9d0ec8248a3f4718",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -103.58695906205264,
        "Y": 587.02495190999821
      },
      {
        "ShowGeometry": true,
        "Name": "PolyCurve.ByPoints",
        "Id": "60407c4cfcf446beb50de49cc979d975",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -282.98322346683949,
        "Y": 469.9795223195116
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "08958880f6974cbc89ab31458c44839d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -390.89820577999217,
        "Y": 439.67013531407389
      }
    ],
    "Annotations": [],
    "X": 2562.4758210748455,
    "Y": -1259.1307053398432,
    "Zoom": 2.1111837376162716
  }
}