{
  "Uuid": "68657227-557d-4edf-8ce0-65e01c266da5",
  "IsCustomNode": false,
  "Description": null,
  "Name": "TIES",
  "ElementResolver": {
    "ResolutionMap": {
      "Vector.XAxis": {
        "Key": "Autodesk.DesignScript.Geometry.Vector",
        "Value": "ProtoGeometry.dll"
      },
      "Point": {
        "Key": "Autodesk.DesignScript.Geometry.Point",
        "Value": "ProtoGeometry.dll"
      },
      "Vector": {
        "Key": "Autodesk.DesignScript.Geometry.Vector",
        "Value": "ProtoGeometry.dll"
      },
      "Geometry": {
        "Key": "Autodesk.DesignScript.Geometry.Geometry",
        "Value": "ProtoGeometry.dll"
      },
      "Vector.YAxis": {
        "Key": "Autodesk.DesignScript.Geometry.Vector",
        "Value": "ProtoGeometry.dll"
      },
      "Geometry.tr": {
        "Key": "Autodesk.DesignScript.Geometry.Geometry",
        "Value": "ProtoGeometry.dll"
      },
      "Get": {
        "Key": "DesignScript.Builtin.Get",
        "Value": "DesignScriptBuiltin.dll"
      },
      "List": {
        "Key": "List",
        "Value": "BuiltIn.ds"
      },
      "PolyCurve": {
        "Key": "Autodesk.DesignScript.Geometry.PolyCurve",
        "Value": "ProtoGeometry.dll"
      }
    }
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport math\r\nimport clr\r\nfrom itertools import chain\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nimport Autodesk\r\nfrom itertools import islice\r\n\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\n#\"\"\" Global Variables\"\"\"\r\n#b = int(input('please enter column's b length: '))\r\nb = 1900\r\n#h = int(input('please enter column's h length: '))\r\nh = 500\r\n#bp = list(range(int(input(\"please enter column's b side rebar number: \"))))\r\nbPoints = list(range(21))\r\n_bPoints = bPoints[:]\r\n#hp = list(range(int(input(\"please enter column's h side rebar number: \"))))\r\nhPoints = list(range(4))\r\n_hPoints = hPoints\r\n#sp = int(input(\"please enter v-spacing criteria: \"))\r\nsp = 150\r\n#hlen = int(input(\"Please enter h length criteria: \"))\r\nbMin = 600\r\n\r\nclearCover = 40\r\nvDia = 25\r\nhDia = 12\r\nvCover = clearCover+hDia+(vDia/2.0)\r\nhCover = clearCover+(hDia/2.0)\r\n\r\nasp = (b-(2*vCover))/float(len(bPoints)-1)\r\n\r\n#----------------------------------------------------------\r\n\"\"\" DYNAMO-PYTHON Geometry Function \"\"\"\r\ndef slc(lst): #to slice vertical rebar list into pattern.\r\n\tpatt = [3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3]\r\n\tit = iter(lst)\r\n\tsliced =[list(islice(it, 0, i)) for i in patt]\r\n\tfor i in sliced[::-1]:\r\n\t    if i == []:\r\n        \tsliced.remove(i)\r\n\treturn sliced\r\n# Concrete Column\r\nbasePoint = Point.ByCoordinates(0, 0, 0)\r\ndef column(basePoint, b, h):\r\n\tp1 = basePoint\r\n\tp2 = Geometry.Translate(p1, Vector.XAxis(), b)\r\n\tp3 = Geometry.Translate(p2, Vector.YAxis(), h)\r\n\tp4 = Geometry.Translate(p3, Vector.XAxis(), -b)\r\n\tlp = [p1, p2, p3, p4]\r\n\tpl = Polygon.ByPoints(lp)\r\n\treturn pl, lp\r\n#Driver\r\ncolumn = column(basePoint, b, h)\r\n\r\n# Vertical Rebar Distribution\r\ndef vRebar(basePoint, vCover, hCover, bPoints, hPoints, b, h):\r\n\t_p = Geometry.Translate(basePoint, Vector.ByCoordinates(vCover, vCover, 0))\r\n\tabsp = (b-(2*vCover))/(len(bPoints)-1)\r\n\tdabsp = absp\r\n\tahsp = (h-(2*vCover))/(len(hPoints)-1)\r\n\tdahsp = ahsp\r\n\tlbp = [_p]\r\n\t_lbp = []\r\n\tlhp = [_p]\r\n\t_lhp = []\r\n\tfor nb in range(len(bPoints)-1):\r\n\t\tlbp.append(Geometry.Translate(_p, Vector.ByCoordinates(dabsp, 0, 0)))\r\n\t\tdabsp += absp\r\n\tfor _nb in lbp:\r\n\t\t_lbp.append(Geometry.Translate(_nb, Vector.ByCoordinates(0, h-(2*vCover), 0)))\r\n\tfor nh in range(len(hPoints)-1):\r\n\t\tlhp.append(Geometry.Translate(_p, Vector.ByCoordinates(0, dahsp, 0)))\r\n\t\tdahsp += ahsp\r\n\tfor _nh in lhp:\r\n\t\t_lhp.append(Geometry.Translate(_nh, Vector.ByCoordinates(b-(2*vCover), 0, 0)))\r\n\treturn lbp[1:-1], _lbp[1:-1], lhp, _lhp\r\n\r\n#Driver\r\nvRebars = vRebar(basePoint, vCover, hCover, bPoints, hPoints, b, h)\r\n\r\n# Get rebars of same position in the opposit list\r\ndef getTwin(vRebar, pureb_leftRebar, currentRebars, side):\r\n\tvRebars = vRebar(basePoint, vCover, hCover, bPoints, hPoints, b, h)\r\n\tvRebarsbPointsList = vRebars[0]\r\n\tvRebars_bPointsList = vRebars[1]\r\n\tvRebarshPointsList = vRebars[2]\r\n\tvRebars_hPointsList = vRebars[3]\r\n\r\n\tif len(pureb_leftRebar) == 1:\r\n\t\ttemp1 = currentRebars[:]\r\n\t\toppositRebars = []\r\n\t\tfor i in temp1:\r\n\t\t\tif side == 'b':\r\n\t\t\t\tti = vRebarsbPointsList.index(i)\r\n\t\t\t\tt = vRebars_bPointsList[ti]\r\n\t\t\t\toppositRebars.append(t)\r\n\t\treturn oppositRebars\r\n\telif len(pureb_leftRebar) >= 2:\r\n\t\ttemp1 = list(chain.from_iterable(currentRebars))\r\n\t\ttemp2 = []\r\n\t\tn = len(currentRebars[0])\r\n\t\tfor l in temp1:\r\n\t\t\tli = temp1.index(l)\r\n\t\t\tif side == 'b':\r\n\t\t\t\tti = vRebarsbPointsList.index(l)\r\n\t\t\t\tt = vRebars_bPointsList[ti]\r\n\t\t\t\ttemp2.append(t)\r\n\t\toppositRebars = [temp2[i:i + n] for i in range(0, len(temp2), n)]\r\n\t\treturn oppositRebars\r\n\t\r\n# Getting Stirrup's curves from Pure Points:\r\ndef getCurve(stirrupPoints):\r\n\tcurrentPoints = stirrupPoints[0]\r\n\ttwinPoints = stirrupPoints[1]\r\n\tpurePoints = [currentPoints, twinPoints]\r\n\ttry:\r\n\t\tfor lst in twinPoints:\r\n\t\t\tlist.reverse(lst)\r\n\t\tpurePoints_transposed = list(map(list, zip(*purePoints)))\r\n\t\tflattened = []\r\n\t\tfor i in purePoints_transposed:\r\n\t\t\tflattened.append(list(chain.from_iterable(i)))\r\n\t\treturn flattened\r\n\texcept: #for single pure rebar per one half of a side\r\n\t\tlist.reverse(twinPoints)\r\n\t\tflattened = []\r\n\t\tflattened.append(list(chain.from_iterable(purePoints)))\r\n\t\treturn flattened\r\n# Conditioning Grouping:\r\ndef tie(p, vCover, hCover, bPoints, hPoints, b, h):\r\n\tvRebars = vRebar(p, vCover, hCover, bPoints, hPoints, b, h)\r\n\tif len(vRebars[0])%2 != 0:\r\n\t\treturn tieOdd(p, vCover, hCover, bPoints, hPoints, b, h)\r\n\r\ndef tieOdd(p, vCover, hCover, bPoints, hPoints, b, h):\r\n\tvRebars = vRebar(p, vCover, hCover, bPoints, hPoints, b, h)\r\n\tvRebarsbPointsList = vRebars[0]\r\n\tbHalf = len(vRebarsbPointsList)/2\r\n\tb_leftRebar = vRebarsbPointsList[:bHalf]\r\n\tb_rightRebar = vRebarsbPointsList[bHalf+1:][::-1]\r\n\tpureb_leftRebar = b_leftRebar[3:]\r\n\tpureb_rightRebar = b_rightRebar[3:]\r\n\tbMid = vRebarsbPointsList[bHalf]\r\n\tif len(pureb_leftRebar) <= 3:\r\n\t\treturn tieOdd1(p, vCover, hCover, bPoints, hPoints, b, h)\r\n\telse:\r\n\t\treturn tieOdd2(p, vCover, hCover, bPoints, hPoints, b, h)\r\n\r\ndef tieOdd1(p, vCover, hCover, bPoints, hPoints, b, h):\r\n\tvRebars = vRebar(p, vCover, hCover, bPoints, hPoints, b, h)\r\n\tvRebarsbPointsList = vRebars[0]\r\n\tbHalf = len(vRebarsbPointsList)/2\r\n\tb_leftRebar = vRebarsbPointsList[:bHalf]\r\n\tb_rightRebar = vRebarsbPointsList[bHalf+1:][::-1]\r\n\tpureb_leftRebar = b_leftRebar[3:]\r\n\tpureb_rightRebar = b_rightRebar[3:]\r\n\tbMid = vRebarsbPointsList[bHalf]\r\n\tif len(pureb_leftRebar) == 1:\r\n\t\tb_vRebarTie = list((pureb_leftRebar[-1], pureb_rightRebar[-1]))\r\n\t\t_b_vRebarTie = getTwin(vRebar,pureb_leftRebar, b_vRebarTie, 'b')\r\n\t\treturn b_vRebarTie, _b_vRebarTie\r\n\telif len(pureb_leftRebar) == 2:\r\n\t\tb_vRebarTie = list((pureb_leftRebar[-2:], pureb_rightRebar[-2:]))\r\n\t\t_b_vRebarTie = getTwin(vRebar, pureb_leftRebar, b_vRebarTie, 'b')\r\n\t\treturn b_vRebarTie, _b_vRebarTie\r\n\telif len(pureb_leftRebar) == 3:\r\n\t\tb_vRebarTie = list((pureb_leftRebar[::2], pureb_rightRebar[::2]))\r\n\t\t_b_vRebarTie = getTwin(vRebar, pureb_leftRebar, b_vRebarTie, 'b')\r\n\t\treturn b_vRebarTie, _b_vRebarTie\r\n\t\t\r\ndef tieOdd2(p, vCover, hCover, bPoints, hPoints, b, h):\r\n\tvRebars = vRebar(p, vCover, hCover, bPoints, hPoints, b, h)\r\n\tvRebarsbPointsList = vRebars[0]\r\n\tbHalf = len(vRebarsbPointsList)/2\r\n\tb_leftRebar = vRebarsbPointsList[:bHalf]\r\n\tb_rightRebar = vRebarsbPointsList[bHalf+1:][::-1]\r\n\tpureb_leftRebar = b_leftRebar[3:]\r\n\tpureb_rightRebar = b_rightRebar[3:]\r\n\tbMid = vRebarsbPointsList[bHalf]\r\n\r\n\taLeft = slc(pureb_leftRebar)\r\n\taRight = slc(pureb_rightRebar)\r\n\tlenLast = len(aLeft[-1])\r\n\tlenBeforeLast = len(aLeft[-2])\r\n\tb_vRebarTie = []\r\n\tif lenLast == 1 and lenBeforeLast == 3:\t\t\t#17\r\n\t\tfor i in aLeft:\r\n\t\t\tif len(i) == 3:\r\n\t\t\t\tb_vRebarTie.append([i[0], i[-1]])\r\n\t\tfor i in aRight:\r\n\t\t\tif len(i) == 3:\r\n\t\t\t\tb_vRebarTie.append([i[0], i[-1]])\r\n\t\tb_vRebarTie.append([bMid])\r\n\t\t_b_vRebarTie = getTwin(vRebar, pureb_leftRebar, b_vRebarTie, 'b')\r\n\t\treturn b_vRebarTie, _b_vRebarTie\r\n\telif lenLast == 1 and lenBeforeLast == 1:\t\t#19\r\n\t\tfor i in aLeft:\r\n\t\t\tif len(i) == 3:\r\n\t\t\t\tb_vRebarTie.append([i[0], i[-1]])\r\n\t\tb_vRebarTie.append(aLeft[-1])\r\n\t\tb_vRebarTie[-1].append(aRight[-1][0])\r\n\t\tfor i in aRight:\r\n\t\t\tif len(i) == 3:\r\n\t\t\t\tb_vRebarTie.append([i[0], i[-1]])\r\n\t\t_b_vRebarTie = getTwin(vRebar, pureb_leftRebar, b_vRebarTie, 'b')\r\n\t\treturn b_vRebarTie, _b_vRebarTie\r\n\telse: \t\t\t\t\t\t\t\t\t\t\t#21 onward\r\n\t\tfor i in aLeft:\r\n\t\t\tif len(i) == 3 or len(i) == 2:\r\n\t\t\t\tb_vRebarTie.append([i[0], i[-1]])\r\n\t\tfor i in aRight:\r\n\t\t\tif len(i) == 3 or len(i) == 2:\r\n\t\t\t\tb_vRebarTie.append([i[0], i[-1]])\r\n\t\t_b_vRebarTie = getTwin(vRebar, pureb_leftRebar, b_vRebarTie, 'b')\r\n\t\treturn b_vRebarTie, _b_vRebarTie\r\n\r\n#----------------------------------\r\n#OUT = column, vRebars, asp\r\nstirrups =  tie(basePoint, vCover, hCover, bPoints, hPoints, b, h)\r\nOUT = stirrups\r\n#OUT = getTwin(vRebar, 1, 3)\r\nOUT = getCurve(stirrups), vRebars, column",
      "VariableInputPorts": true,
      "Id": "4c2929a6030f40b89e20bfe7ff74fa59",
      "Inputs": [
        {
          "Id": "4e43b248854043899dac35692288d918",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0f6cd5bc8d564399a6cadc97b98ac448",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.PolyCurve.ByPoints@Autodesk.DesignScript.Geometry.Point[],bool",
      "Id": "51b36166871347079a0b22a0ce0b7e3c",
      "Inputs": [
        {
          "Id": "fbb6f23a75164635aa352a54456dacbb",
          "Name": "points",
          "Description": "Points to make polycurve\n\nPoint[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6d2051b770704a3e8666e8ecd0d8501a",
          "Name": "connectLastToFirst",
          "Description": "make close or open polycurve\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4b6ebb88469b47b183e11a5080aff564",
          "Name": "PolyCurve",
          "Description": "PolyCurve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Make PolyCurve by connecting points. Set the 'connectLastToFirst' input to true to close the PolyCurve.\n\nPolyCurve.ByPoints (points: Point[], connectLastToFirst: bool = false): PolyCurve"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "fd0f8e68a6e54e339057dd8c4523fe64",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4824892b2e2245ba94788cba7eaaa977",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a[0];",
      "Id": "6747718378954930bf211dd128456c34",
      "Inputs": [
        {
          "Id": "7ca1edd8a7784e6cb9d86c7e103b2f4d",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d01211d4b8914c91bbb176fa2a295d95",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a[0];",
      "Id": "6b21d474ab99450f87cb42d7ddc25a43",
      "Inputs": [
        {
          "Id": "5e1145b6d6174c80a0c6dbc9f3975f8d",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5ed439997f134756af4a178e5ac28616",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a[1];",
      "Id": "ab5865f25e914e4b830f50eec617159f",
      "Inputs": [
        {
          "Id": "fe96c96d36b24b07a9e66db02666f24d",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8feec6392754422ea78055121f51a2c7",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "c514f97d5bda40618c260fa16e6f1d96",
      "Inputs": [
        {
          "Id": "9e7bc9c9c75c4ad1953a3fa1c2adfbdd",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6be02278d4f448399b73034c16f43ce7",
          "Name": "amt",
          "Description": "Layers of nesting to remove.\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "36b3f982a6294f9e9518a6240fb4c210",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Geometry.Translate@Autodesk.DesignScript.Geometry.Vector",
      "Id": "f88081fc57dc49efa5b3620fc2b13540",
      "Inputs": [
        {
          "Id": "3ff3954a3b0b446d9fae66febdf02c49",
          "Name": "geometry",
          "Description": "Autodesk.DesignScript.Geometry.Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "bc1984b142474f47b71474a3b4cbbc4b",
          "Name": "direction",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "44da22005f694722a43c5e3070c1e00d",
          "Name": "Geometry",
          "Description": "Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Translate geometry in the given direction by the vector length\n\nGeometry.Translate (direction: Vector): Geometry"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "Vector.ByCoordinates(0, 0, -10000);\nstirrup = 0..10000..150;\nVector.ByCoordinates(0, 0, -stirrup);",
      "Id": "884961902df74a05919f051bf55288ed",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "7233e1ff2751463996043d7ab11efd8d",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ec6a5ad67a3447df8c89bd3c531d7b53",
          "Name": "",
          "Description": "stirrup",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3df93dc534a845c289f5dc3d743b6be0",
          "Name": "",
          "Description": "Value of expression at line 3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Line.ByStartPointEndPoint@Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point",
      "Id": "3ba04bb9e2ba40fab71c09bccb22b0c8",
      "Inputs": [
        {
          "Id": "08a2abf6dfdd4b199783eb9fa74f23e3",
          "Name": "startPoint",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "085aed78bf3e473e8aeff3bfe9afd8f8",
          "Name": "endPoint",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b44c7d8bdaea4b18870cdc9ac199848a",
          "Name": "Line",
          "Description": "Line",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a straight Line between two input Points.\n\nLine.ByStartPointEndPoint (startPoint: Point, endPoint: Point): Line"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Geometry.Translate@Autodesk.DesignScript.Geometry.Vector",
      "Id": "55f91f07ae314b7a82ebe6f8d2b516fb",
      "Inputs": [
        {
          "Id": "d30d96c9600f4b0f908719a0035293f2",
          "Name": "geometry",
          "Description": "Autodesk.DesignScript.Geometry.Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2046ea98cd8b4db188ef87a6511a9674",
          "Name": "direction",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a3f7d27b909f4d458002355a58a194dd",
          "Name": "Geometry",
          "Description": "Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "CrossProduct",
      "Description": "Translate geometry in the given direction by the vector length\n\nGeometry.Translate (direction: Vector): Geometry"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a;",
      "Id": "cdfd09f296724c7bbca11ae0998af29c",
      "Inputs": [
        {
          "Id": "579ad2c65577477fbc9921a32e7b5b2e",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ae7eff96f56a4b7b89d7a49fa03465a5",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    }
  ],
  "Connectors": [
    {
      "Start": "0f6cd5bc8d564399a6cadc97b98ac448",
      "End": "7ca1edd8a7784e6cb9d86c7e103b2f4d",
      "Id": "2056522f56c84ddab6652eedb0004912"
    },
    {
      "Start": "0f6cd5bc8d564399a6cadc97b98ac448",
      "End": "fe96c96d36b24b07a9e66db02666f24d",
      "Id": "cbb5f6daeee0450cbc9a9e85f0f20b1f"
    },
    {
      "Start": "4b6ebb88469b47b183e11a5080aff564",
      "End": "d30d96c9600f4b0f908719a0035293f2",
      "Id": "c2b6b4e3815c4cbf9a815b862db9ac54"
    },
    {
      "Start": "4824892b2e2245ba94788cba7eaaa977",
      "End": "6d2051b770704a3e8666e8ecd0d8501a",
      "Id": "08d454389fa24a4a9239aa9c26624cee"
    },
    {
      "Start": "d01211d4b8914c91bbb176fa2a295d95",
      "End": "5e1145b6d6174c80a0c6dbc9f3975f8d",
      "Id": "77d6ae79ec544d248cbade4c1bee856d"
    },
    {
      "Start": "d01211d4b8914c91bbb176fa2a295d95",
      "End": "fbb6f23a75164635aa352a54456dacbb",
      "Id": "93a62e0aa44b4ff183f7130157e56e6d"
    },
    {
      "Start": "8feec6392754422ea78055121f51a2c7",
      "End": "9e7bc9c9c75c4ad1953a3fa1c2adfbdd",
      "Id": "918ff40c49ae473ba99c0e1cc72af579"
    },
    {
      "Start": "36b3f982a6294f9e9518a6240fb4c210",
      "End": "3ff3954a3b0b446d9fae66febdf02c49",
      "Id": "e5158e70433c4b2f947f870133f9c4fe"
    },
    {
      "Start": "36b3f982a6294f9e9518a6240fb4c210",
      "End": "08a2abf6dfdd4b199783eb9fa74f23e3",
      "Id": "5627c4089949423ebacfeeac1ec67366"
    },
    {
      "Start": "44da22005f694722a43c5e3070c1e00d",
      "End": "085aed78bf3e473e8aeff3bfe9afd8f8",
      "Id": "65cafdf2fac040d181095d3496d26d58"
    },
    {
      "Start": "7233e1ff2751463996043d7ab11efd8d",
      "End": "bc1984b142474f47b71474a3b4cbbc4b",
      "Id": "d4521a360b5e42c2812ec02a17bed0ed"
    },
    {
      "Start": "3df93dc534a845c289f5dc3d743b6be0",
      "End": "2046ea98cd8b4db188ef87a6511a9674",
      "Id": "d6e61763002d4bfc915bdee535a5bb1b"
    },
    {
      "Start": "3df93dc534a845c289f5dc3d743b6be0",
      "End": "579ad2c65577477fbc9921a32e7b5b2e",
      "Id": "7e5715dd474d4b9a9e6a6defac0b137f"
    }
  ],
  "Dependencies": [],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 10000.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.1.0.7500",
      "RunType": "Automatic",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": 2149.5084218372685,
      "EyeY": 1820.2530308590988,
      "EyeZ": 1839.7920932290569,
      "LookX": -1692.0524439798114,
      "LookY": -3076.1208415282636,
      "LookZ": -1709.2305824301063,
      "UpX": -0.44844471600647345,
      "UpY": 0.77051324277578681,
      "UpZ": -0.45299743861638342
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "4c2929a6030f40b89e20bfe7ff74fa59",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -881.42905229102462,
        "Y": 526.990090971424
      },
      {
        "ShowGeometry": true,
        "Name": "PolyCurve.ByPoints",
        "Id": "51b36166871347079a0b22a0ce0b7e3c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -233.94614766792643,
        "Y": 278.65243704734871
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "fd0f8e68a6e54e339057dd8c4523fe64",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -404.39247521027232,
        "Y": 320.330785928426
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "6747718378954930bf211dd128456c34",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -643.48767066306175,
        "Y": 233.78400873856626
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "6b21d474ab99450f87cb42d7ddc25a43",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -756.8205618906494,
        "Y": 72.1824678981412
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "ab5865f25e914e4b830f50eec617159f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -533.49444144235156,
        "Y": 690.21521972270625
      },
      {
        "ShowGeometry": true,
        "Name": "List.Flatten",
        "Id": "c514f97d5bda40618c260fa16e6f1d96",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -392.755709440944,
        "Y": 700.16986494669538
      },
      {
        "ShowGeometry": true,
        "Name": "Geometry.Translate",
        "Id": "f88081fc57dc49efa5b3620fc2b13540",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -80.06127676934193,
        "Y": 875.53889919872472
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "884961902df74a05919f051bf55288ed",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -351.17180411205788,
        "Y": 555.92433493861051
      },
      {
        "ShowGeometry": true,
        "Name": "Line.ByStartPointEndPoint",
        "Id": "3ba04bb9e2ba40fab71c09bccb22b0c8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -18.223067439342231,
        "Y": 742.89437228669544
      },
      {
        "ShowGeometry": true,
        "Name": "Geometry.Translate",
        "Id": "55f91f07ae314b7a82ebe6f8d2b516fb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 104.93601684087844,
        "Y": 427.81286815527369
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "cdfd09f296724c7bbca11ae0998af29c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 69.0,
        "Y": 620.0
      }
    ],
    "Annotations": [],
    "X": 944.24778751370377,
    "Y": 161.54957669635866,
    "Zoom": 0.33122842328248631
  }
}